{"version":3,"sources":["App.js"],"names":["pixelRatio","PixelRatio","get","deviceHeight","Dimensions","height","deviceWidth","width","normalize","size","time_interval","App","props","init","i","state","levels","line","line_sum","step","numbers","answers","result","numbers_count","push","getRandomIntInclusive","min_random","max_random","setState","startTimer","t","a","async","nextPressed","timer","seconds","Promise","resolve","reject","setInterval","clearInterval","check","correct_count","index","map","l","style","styles","numbersBox","key","l2","i2","numberResult","color","correct","value","repeat","page","time_1","time_2","task","variants_count","variants","currentAnswer","taskStart","then","variantCreate","underlayColor","onPress","numberAnswer","borderBottomColor","variant_index","variantRender","variant","variantPress","variantText","pages","title","desc","button","buttonText","titleLevels","numbersBoxTask","numbersLine","numbersBoxVariants","buttonNext","descEnd","bannerError","e","alert","progressBar","Platform","OS","slider","styleAttr","indeterminate","progress","minimumValue","maximumValue","disabled","thumbTintColor","minimumTrackTintColor","maximumTrackTintColor","this","min","max","Math","ceil","floor","random","number","container","pagesBox","Component","StyleSheet","create","flex","flexDirection","paddingTop","flexWrap","alignItems","justifyContent","marginTop","fontSize","padding","margin","borderBottomWidth","backgroundColor","top","position","zIndex","textAlign","borderRadius","fontWeight"],"mappings":"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","file":"static/js/app.6647fc0a.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {Component, Fragment} from 'react';\nimport { StyleSheet, Text, View, Dimensions, PixelRatio, TouchableHighlight, ProgressBarAndroid, Platform } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nconst pixelRatio = PixelRatio.get();\nconst deviceHeight = Dimensions.get('window').height;\nconst deviceWidth = Dimensions.get('window').width;\n\nconst normalize = (size) => {\n  if (pixelRatio === 2) {\n    // iphone 5s and older Androids\n    if (deviceWidth < 360) {\n      return size * 0.95;\n    } \n    // iphone 5\n    if (deviceHeight < 667) {\n      return size;\n    // iphone 6-6s\n    } else if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.15;\n    }\n    // older phablets\n    return size * 1.25;\n  } \n  if (pixelRatio === 3) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n        return size;\n    }    \n    // Catch other weird android width sizings\n    if (deviceHeight < 667) {\n      return size * 1.15;\n    // catch in-between size Androids and scale font up\n    // a tad but not too much\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.2;\n    }\n    // catch larger devices\n    // ie iphone 6s plus / 7 plus / mi note 等等\n    return size * 1.27;\n  }\n  if (pixelRatio === 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n        return size;\n    // Catch other smaller android height sizings\n    }\n    if (deviceHeight < 667) {\n      return size * 1.20;\n    // catch in-between size Androids and scale font up\n    // a tad but not too much\n    }\n    if(deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.25;\n    }\n    // catch larger phablet devices\n    return size * 1.40;\n  }\n  // if older device ie pixelRatio !== 2 || 3 || 3.5\n  return size;\n}\nlet time_interval = null; //для прогресса\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 'start',\n      timer: 0, //Значение прогресса\n      time_1: 2, //Время запоминания\n      time_2: 15, //Время выполнения\n      numbers: [], //Номера с ответами\n      answers: [], //Решения, изначально пустые\n      task: 0,\n      levels: 9, //количество уровней\n      variants_count: 12, //количество вариантов ответа\n      numbers_count: 5, //количество цифр  в одном ряде\n      min_random: 1, //минимальное значение сгенерируемого числа\n      max_random: 7, //максимальное значение сгенерируемого числа\n      variants: [], //Варианты ответов\n      seconds: 0,\n      currentAnswer: 0, //Текущий сфокусированный инпут ответа\n      result: [],\n      correct_count: 0 //Количество правильных ответов\n    }\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  init = () => {\n    for (let i = 0; i < (this.state.levels + 1); i++) {\n      let line = [], line_sum = [], step = 0, numbers = [], answers = [], result = [];\n      for (let i = 0; i < this.state.numbers_count; i++) {\n        line.push(this.getRandomIntInclusive(this.state.min_random, this.state.max_random));\n      }\n      for (let i = 0; i < (this.state.numbers_count - 1); i++) {\n        line_sum.push(line[step] + line[step+1]);\n        answers.push(0);\n        result.push({\"test\": 1});\n        step++;\n      }\n      numbers.push(line,line_sum);\n      this.state.numbers.push(numbers)\n      this.state.answers.push(answers)\n      this.state.result.push(result)\n      this.setState({\n        numbers: this.state.numbers,\n        answers: this.state.answers,\n        result: this.state.result\n      })\n    }\n  }\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  startTimer = async (t, nextPressed = 0) =>{\n    let timer = nextPressed === 1 ? 0 : this.state.timer, seconds = 0\n    const setState = (a, seconds) => {\n      this.setState({\n        timer: a,\n        seconds: seconds\n      })\n    }\n    return new Promise(function(resolve, reject) {\n      time_interval = setInterval(() => {\n        timer = timer + 1/(t*10)\n        seconds = seconds + 10;\n        setState(timer, seconds)\n        if(timer >= 1) {\n          clearInterval(time_interval)\n          time_interval = null\n          resolve(1)\n        }\n      }, 100)\n    })\n  }\n\n  check = () => {\n    let correct_count = 0;\n    for (let index = 0; index < (this.state.levels + 1); index++) {\n      this.state.answers[index].map((l, i)=>{\n        if(this.state.numbers[index][1][i] == l) {\n          this.state.result[index][i] = {\n            'value': l,\n            'correct': true,\n            'correct_answer': this.state.numbers[index][1][i]\n          }\n          correct_count++\n        } else {\n          this.state.result[index][i] = {\n            'value': l,\n            'correct': false,\n            'correct_answer': this.state.numbers[index][1][i]\n          }\n        }\n        this.setState({result: this.state.result})\n      })\n    }\n    this.setState({\n      correct_count: correct_count\n    }, ()=>{\n    })\n    //console.log(this.state.result)\n  }\n\n  result = () => {\n    return this.state.result.map((l, i) => {\n      return (<View style={styles.numbersBox} key={i}>{\n                l.map((l2, i2) => {\n                 return (<Text style={[styles.numberResult,{color: !l2.correct ? '#e74c3c' : '#2ecc71'}]} key={i2}>{l2.value}</Text>)\n                })\n              }</View>)\n    })\n  }\n\n  repeat = () => {\n    this.setState({\n      page: 'start',\n      timer: 0, //Значение прогресса\n      time_1: 2, //Время запоминания\n      time_2: 15, //Время выполнения\n      numbers: [], //Номера с ответами\n      answers: [], //Решения, изначально пустые\n      task: 0,\n      levels: 9, //количество уровней\n      variants_count: 12, //количество вариантов ответа\n      numbers_count: 5, //количество цифр  в одном ряде\n      min_random: 1, //минимальное значение сгенерируемого числа\n      max_random: 7, //максимальное значение сгенерируемого числа\n      variants: [], //Варианты ответов\n      seconds: 0,\n      currentAnswer: 0, //Текущий сфокусированный инпут ответа\n      result: [],\n      correct_count: 0 //Количество правильных ответов\n    }, ()=>{\n      this.init()\n    })\n  }\n\n  taskStart = (nextPressed = 0) => {\n    if(nextPressed == 1 && time_interval) {\n      clearInterval(time_interval)\n      time_interval = null\n    }\n    this.setState({\n      page: 'task', \n      task: this.state.task + nextPressed\n    })\n    if(this.state.levels < this.state.task || nextPressed == 1 && this.state.task == this.state.levels) {\n      this.check()\n      this.setState({\n        page: 'finish',\n        task: 0,\n        timer: 0\n      })\n      return null;\n    }\n    this.startTimer(this.state.time_1, nextPressed).then(()=>{\n      this.setState({\n        page: 'task_sum',\n        timer: 0,\n        currentAnswer: 0\n      })\n      this.variantCreate()\n      this.startTimer(this.state.time_2).then(()=>{\n        this.setState({\n          task: this.state.task + 1,\n          timer: 0\n        }, ()=>{\n          this.taskStart();\n        })\n      })\n    })\n  }\n\n  numbersLine() {\n    if(this.state.task > this.state.levels) return null;\n    return this.state.numbers[this.state.task][0].map((l, i) => {\n      return (<Text style={styles.number} key={i}>{l}</Text>)\n    })\n  }\n\n  answers = () => {\n    if(this.state.task > this.state.levels) return null;\n    return this.state.answers[this.state.task].map((l, i) => {\n      return (<TouchableHighlight \n                key={i}\n                underlayColor=\"transparent\"\n                onPress={() => this.setState({currentAnswer: i})}>\n                  <Text style={[styles.numberAnswer, {\n                    borderBottomColor: (this.state.currentAnswer === i) ? '#7f8c8d' : ((l == '0') ? '#ecf0f1' : 'black'),\n                    color: (this.state.currentAnswer === i) ? '#7f8c8d' : ((l == '0') ? '#ecf0f1' : 'black')\n                  }]}>{l}</Text>\n              </TouchableHighlight>)\n    })\n  }\n\n  variantCreate = () => {\n    let variants = []\n    if(this.state.task > this.state.levels) return null;\n    this.state.numbers[this.state.task][1].map((l, i) => {\n      let variant_index = this.getRandomIntInclusive(0,(this.state.variants_count-1));\n      if(!variants[variant_index]) {\n        variants[variant_index] = l\n      } else {\n        variants[this.getRandomIntInclusive(0,(this.state.variants_count-1))] = l\n      }\n    })\n    for (let i = 0; i < this.state.variants_count; i++) {\n      if(!variants[i]) {\n        variants[i] = this.getRandomIntInclusive(this.state.min_random*2,this.state.max_random*2)\n      }\n    }\n    this.setState({variants: variants})\n    //console.log(variants)\n  }\n\n  variantRender = () => {\n    return this.state.variants.map((l, i) => {\n      return (<TouchableHighlight\n                key={i}\n                underlayColor=\"#5cd28e\"\n                style={styles.variant}\n                onPress={() => this.variantPress(l, i)}\n              >\n                <Text style={styles.variantText} key={i}>{l}</Text>\n              </TouchableHighlight>);\n    })\n  }\n\n  variantPress = (value, key) => {\n    this.state.answers[this.state.task][this.state.currentAnswer] = value;\n    this.setState({answers: this.state.answers}, ()=>{\n      this.setState({\n        currentAnswer: (this.state.currentAnswer === (this.state.numbers_count - 2)) ? 0 : (this.state.currentAnswer+1)\n      })\n    });\n  }\n\n  pages = () => {\n    switch (this.state.page) {\n      case \"start\":\n        return (<Fragment>\n                  <Text style={styles.title}>Memory training</Text>\n                  <Text style={styles.desc}>You will be given {this.state.numbers_count} numbers. Your task is to try to remember them in {this.state.time_1} seconds, then add the first with the second in your mind, and write down the resulting amount; add the second number with the third, write down the amount; etc. Thus, {this.state.numbers_count - 1} amounts should be received and recorded from you. The calculation and execution time is {this.state.time_2} seconds. Then proceed to the next row of numbers</Text>\n                  <TouchableHighlight\n                    underlayColor=\"#5cd28e\"\n                    style={styles.button}\n                    onPress={() => this.taskStart()}\n                  >\n                    <Text style={styles.buttonText}>Start</Text>\n                  </TouchableHighlight>\n                </Fragment>)\n      \n      case \"task\":\n        return (<Fragment>\n                  <Text style={styles.titleLevels}>{this.state.task + 1}/{this.state.levels + 1}</Text>\n                  <Text style={styles.title}>Memorize the numbers</Text>\n                  <View style={styles.numbersBoxTask}>\n                    {this.numbersLine()}\n                  </View>\n                </Fragment>)\n\n      case \"task_sum\":\n        return (<Fragment>\n                  <Text style={styles.titleLevels}>{this.state.task + 1}/{this.state.levels + 1}</Text>\n                  <Text style={styles.title}>Enter answers</Text>\n                  <View style={styles.numbersBox}>\n                    {this.answers()}\n                  </View>\n                  <View style={styles.numbersBoxVariants}>\n                    {this.variantRender()}\n                  </View>\n                  <TouchableHighlight\n                    underlayColor=\"#7f8c8d\"\n                    style={styles.buttonNext}\n                    onPress={() => this.taskStart(1)}\n                  >\n                    <Text style={styles.buttonText}>Next</Text>\n                  </TouchableHighlight>\n                </Fragment>)\n\n      case \"finish\":\n        return (<Fragment>\n                  <Text style={styles.title}>Result</Text>\n                  <Text style={styles.descEnd}>The number of correct answers - {this.state.correct_count}. The norm of an adult is from {((this.state.numbers_count-1)*10)*0.75} and above</Text>\n                  {this.result()}\n                  <TouchableHighlight\n                    underlayColor=\"#5cd28e\"\n                    style={styles.button}\n                    onPress={() => this.repeat()}\n                  >\n                    <Text style={styles.buttonText}>Repeat</Text>\n                  </TouchableHighlight>\n                </Fragment>)\n    \n      default:\n        break;\n    }\n  }\n\n  bannerError = (e) => {\n    alert(e)\n  }\n\n  progressBar = () => {\n    if(Platform.OS == 'android') {\n      return <ProgressBarAndroid style={styles.slider} styleAttr=\"Horizontal\" color=\"#e74c3c\" indeterminate={false} progress={this.state.timer} />\n    } else {\n      return <Slider\n          style={styles.slider}\n          minimumValue={0}\n          maximumValue={1}\n          value={this.state.timer}\n          disabled={false}\n          thumbTintColor=\"transparent\"\n          minimumTrackTintColor=\"#e74c3c\"\n          maximumTrackTintColor=\"transparent\"\n      />\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n      <View style={styles.pagesBox}>\n        {this.progressBar()}\n        {this.pages()}\n        <StatusBar style=\"auto\" />\n      </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  numbersBox: {\n    flexDirection: 'row',\n  },\n  numbersBoxTask: {\n    flexDirection: 'row',\n    paddingTop:10\n  },\n  numbersBoxVariants: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 30\n  },\n  number: {\n    fontSize: normalize(34),\n    color: 'black',\n    padding: 5\n  },\n  numberResult: {\n    fontSize: normalize(24),\n    color: '#7f8c8d',\n    padding: 5\n  },\n  numberAnswer: {\n    fontSize: normalize(34),\n    color: '#7f8c8d',\n    margin: 5,\n    padding: 5,\n    borderBottomColor: '#7f8c8d',\n    borderBottomWidth: 3\n  },\n  pagesBox: {\n    flex: 1,\n    padding: 15,\n    paddingTop: 0,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  slider: {\n    top: 0,\n    position: 'absolute',\n    width: '100%', \n    height: Platform.OS == 'android' ? 4 : 2,\n    zIndex: 1000,\n  },\n  title: {\n    fontSize: normalize(28),\n    textAlign: 'center',\n    padding: 15,\n  },\n  titleLevels: {\n    fontSize: normalize(28),\n    textAlign: 'center',\n    padding: 15,\n    color: '#7f8c8d',\n  },\n  desc: {\n    fontSize: normalize(14),\n    textAlign: 'center',\n    padding: 15\n  },\n  descEnd: {\n    fontSize: normalize(14),\n    textAlign: 'center',\n    padding: 15,\n    paddingTop: 0\n  },\n  button: {\n    backgroundColor: '#2ecc71',\n    borderRadius: 30,\n    width: '50%',\n    margin: 15\n  },\n  buttonNext: {\n    backgroundColor: '#bdc3c7',\n    borderRadius: 30,\n    width: '50%',\n    margin: 15,\n    marginTop: 30\n  },\n  variant: {\n    backgroundColor: '#2ecc71',\n    borderRadius: 25,\n    width: 50,\n    height: 50,\n    margin: 10\n  },\n  variantText: {\n    fontSize: 20,\n    fontWeight: '500',\n    textAlign: 'center',\n    padding: 10,\n    color: 'white'\n  },\n  buttonText: {\n    fontSize: normalize(16),\n    fontWeight: '500',\n    textAlign: 'center',\n    padding: 15,\n    color: 'white'\n  }\n});\n"],"sourceRoot":""}