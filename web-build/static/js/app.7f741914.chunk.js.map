{"version":3,"sources":["App.js"],"names":["pixelRatio","PixelRatio","get","deviceHeight","Dimensions","height","deviceWidth","width","normalize","size","time_interval","App","props","levelsChoose","setState","page","levelsChooseBtns","level","timer","time_1","time_2","numbers","answers","task","levels","variants_count","numbers_count","min_random","max_random","variants","seconds","currentAnswer","result","correct_count","init","taskStart","i","state","line","line_sum","step","push","getRandomIntInclusive","startTimer","t","a","async","nextPressed","Promise","resolve","reject","setInterval","clearInterval","check","index","map","l","style","styles","numbersBox","key","l2","i2","numberResult","color","correct","value","repeat","then","variantCreate","underlayColor","onPress","numberAnswer","borderBottomColor","variant_index","found","variantRender","variant","variantPress","variantText","pages","title","desc","button","buttonText","backgroundColor","iconText","buttonShare","buttonTextShare","titleLevels","numbersBoxTask","numbersLine","numbersBoxVariants","buttonNext","descEnd","bannerError","e","alert","progressBar","Platform","OS","slider","styleAttr","indeterminate","progress","minimumValue","maximumValue","disabled","thumbTintColor","minimumTrackTintColor","maximumTrackTintColor","this","min","max","Math","ceil","floor","random","number","container","pagesBox","Component","StyleSheet","create","flex","flexDirection","paddingTop","flexWrap","alignItems","justifyContent","marginTop","fontSize","padding","margin","borderBottomWidth","top","position","zIndex","textAlign","borderRadius","marginBottom","fontWeight"],"mappings":"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","file":"static/js/app.7f741914.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {Component, Fragment} from 'react';\nimport { StyleSheet, Text, View, Dimensions, PixelRatio, TouchableHighlight, ProgressBarAndroid, Platform } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nconst pixelRatio = PixelRatio.get();\nconst deviceHeight = Dimensions.get('window').height;\nconst deviceWidth = Dimensions.get('window').width;\n\nconst normalize = (size) => {\n  if (pixelRatio === 2) {\n    // iphone 5s and older Androids\n    if (deviceWidth < 360) {\n      return size * 0.95;\n    } \n    // iphone 5\n    if (deviceHeight < 667) {\n      return size;\n    // iphone 6-6s\n    } else if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.15;\n    }\n    // older phablets\n    return size * 1.25;\n  } \n  if (pixelRatio === 3) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n        return size;\n    }    \n    // Catch other weird android width sizings\n    if (deviceHeight < 667) {\n      return size * 1.15;\n    // catch in-between size Androids and scale font up\n    // a tad but not too much\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.2;\n    }\n    // catch larger devices\n    // ie iphone 6s plus / 7 plus / mi note 等等\n    return size * 1.27;\n  }\n  if (pixelRatio === 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n        return size;\n    // Catch other smaller android height sizings\n    }\n    if (deviceHeight < 667) {\n      return size * 1.20;\n    // catch in-between size Androids and scale font up\n    // a tad but not too much\n    }\n    if(deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.25;\n    }\n    // catch larger phablet devices\n    return size * 1.40;\n  }\n  // if older device ie pixelRatio !== 2 || 3 || 3.5\n  return size;\n}\nlet time_interval = null; //для прогресса\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 'start',\n      timer: 0, //Значение прогресса\n      time_1: 2, //Время запоминания\n      time_2: 15, //Время выполнения\n      numbers: [], //Номера с ответами\n      answers: [], //Решения, изначально пустые\n      task: 0,\n      levels: 9, //количество уровней\n      variants_count: 12, //количество вариантов ответа\n      numbers_count: 5, //количество цифр  в одном ряде\n      min_random: 1, //минимальное значение сгенерируемого числа\n      max_random: 7, //максимальное значение сгенерируемого числа\n      variants: [], //Варианты ответов\n      seconds: 0,\n      currentAnswer: 0, //Текущий сфокусированный инпут ответа\n      result: [],\n      correct_count: 0 //Количество правильных ответов\n    }\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  levelsChoose = () => {\n    this.setState({\n      page: 'levels_choose'\n    })\n  }\n\n  levelsChooseBtns = (level = 0) => {\n    switch (level) {\n      case 0:\n          this.setState({\n            page: 'start',\n            timer: 0, //Значение прогресса\n            time_1: 2, //Время запоминания\n            time_2: 15, //Время выполнения\n            numbers: [], //Номера с ответами\n            answers: [], //Решения, изначально пустые\n            task: 0,\n            levels: 9, //количество уровней\n            variants_count: 12, //количество вариантов ответа\n            numbers_count: 4, //количество цифр  в одном ряде\n            min_random: 1, //минимальное значение сгенерируемого числа\n            max_random: 7, //максимальное значение сгенерируемого числа\n            variants: [], //Варианты ответов\n            seconds: 0,\n            currentAnswer: 0, //Текущий сфокусированный инпут ответа\n            result: [],\n            correct_count: 0 //Количество правильных ответов\n          }, ()=>{\n        \n            this.init()\n            this.taskStart();\n          })\n        break;\n\n      case 1:\n          this.setState({\n            page: 'start',\n            timer: 0, //Значение прогресса\n            time_1: 2, //Время запоминания\n            time_2: 15, //Время выполнения\n            numbers: [], //Номера с ответами\n            answers: [], //Решения, изначально пустые\n            task: 0,\n            levels: 9, //количество уровней\n            variants_count: 12, //количество вариантов ответа\n            numbers_count: 5, //количество цифр  в одном ряде\n            min_random: 1, //минимальное значение сгенерируемого числа\n            max_random: 7, //максимальное значение сгенерируемого числа\n            variants: [], //Варианты ответов\n            seconds: 0,\n            currentAnswer: 0, //Текущий сфокусированный инпут ответа\n            result: [],\n            correct_count: 0 //Количество правильных ответов\n          }, ()=>{\n        \n            this.init()\n            this.taskStart();\n          })\n        break; \n\n      case 2:  \n          this.setState({\n            page: 'start',\n            timer: 0, //Значение прогресса\n            time_1: 2, //Время запоминания\n            time_2: 15, //Время выполнения\n            numbers: [], //Номера с ответами\n            answers: [], //Решения, изначально пустые\n            task: 0,\n            levels: 9, //количество уровней\n            variants_count: 12, //количество вариантов ответа\n            numbers_count: 6, //количество цифр  в одном ряде\n            min_random: 1, //минимальное значение сгенерируемого числа\n            max_random: 7, //максимальное значение сгенерируемого числа\n            variants: [], //Варианты ответов\n            seconds: 0,\n            currentAnswer: 0, //Текущий сфокусированный инпут ответа\n            result: [],\n            correct_count: 0 //Количество правильных ответов\n          }, ()=>{\n        \n            this.init()\n            this.taskStart();\n          })\n        break; \n\n      case 3:  \n          this.setState({\n            page: 'start',\n            timer: 0, //Значение прогресса\n            time_1: 2, //Время запоминания\n            time_2: 15, //Время выполнения\n            numbers: [], //Номера с ответами\n            answers: [], //Решения, изначально пустые\n            task: 0,\n            levels: 9, //количество уровней\n            variants_count: 12, //количество вариантов ответа\n            numbers_count: 7, //количество цифр  в одном ряде\n            min_random: 1, //минимальное значение сгенерируемого числа\n            max_random: 7, //максимальное значение сгенерируемого числа\n            variants: [], //Варианты ответов\n            seconds: 0,\n            currentAnswer: 0, //Текущий сфокусированный инпут ответа\n            result: [],\n            correct_count: 0 //Количество правильных ответов\n          }, ()=>{\n        \n            this.init()\n            this.taskStart();\n          })\n        break; \n    }\n  }\n\n  init = () => {\n    for (let i = 0; i < (this.state.levels + 1); i++) {\n      let line = [], line_sum = [], step = 0, numbers = [], answers = [], result = [];\n      for (let i = 0; i < this.state.numbers_count; i++) {\n        line.push(this.getRandomIntInclusive(this.state.min_random, this.state.max_random));\n      }\n      for (let i = 0; i < (this.state.numbers_count - 1); i++) {\n        line_sum.push(line[step] + line[step+1]);\n        answers.push(0);\n        result.push({\"test\": 1});\n        step++;\n      }\n      numbers.push(line,line_sum);\n      this.state.numbers.push(numbers)\n      this.state.answers.push(answers)\n      this.state.result.push(result)\n      this.setState({\n        numbers: this.state.numbers,\n        answers: this.state.answers,\n        result: this.state.result\n      })\n    }\n  }\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  startTimer = async (t, nextPressed = 0) =>{\n    let timer = nextPressed === 1 ? 0 : this.state.timer, seconds = 0\n    const setState = (a, seconds) => {\n      this.setState({\n        timer: a,\n        seconds: seconds\n      })\n    }\n    return new Promise(function(resolve, reject) {\n      time_interval = setInterval(() => {\n        timer = timer + 1/(t*10)\n        seconds = seconds + 10;\n        setState(timer, seconds)\n        if(timer >= 1) {\n          clearInterval(time_interval)\n          time_interval = null\n          resolve(1)\n        }\n      }, 100)\n    })\n  }\n\n  check = () => {\n    let correct_count = 0;\n    for (let index = 0; index < (this.state.levels + 1); index++) {\n      this.state.answers[index].map((l, i)=>{\n        if(this.state.numbers[index][1][i] == l) {\n          this.state.result[index][i] = {\n            'value': l,\n            'correct': true,\n            'correct_answer': this.state.numbers[index][1][i]\n          }\n          correct_count++\n        } else {\n          this.state.result[index][i] = {\n            'value': l,\n            'correct': false,\n            'correct_answer': this.state.numbers[index][1][i]\n          }\n        }\n        this.setState({result: this.state.result})\n      })\n    }\n    this.setState({\n      correct_count: correct_count\n    }, ()=>{\n    })\n    //console.log(this.state.result)\n  }\n\n  result = () => {\n    return this.state.result.map((l, i) => {\n      return (<View style={styles.numbersBox} key={i}>{\n                l.map((l2, i2) => {\n                 return (<Text style={[styles.numberResult,{color: !l2.correct ? '#e74c3c' : '#2ecc71'}]} key={i2}>{l2.value}</Text>)\n                })\n              }</View>)\n    })\n  }\n\n  repeat = () => {\n    this.setState({\n      page: 'start',\n      timer: 0, //Значение прогресса\n      time_1: 2, //Время запоминания\n      time_2: 15, //Время выполнения\n      numbers: [], //Номера с ответами\n      answers: [], //Решения, изначально пустые\n      task: 0,\n      levels: 9, //количество уровней\n      variants_count: 12, //количество вариантов ответа\n      numbers_count: 5, //количество цифр  в одном ряде\n      min_random: 1, //минимальное значение сгенерируемого числа\n      max_random: 7, //максимальное значение сгенерируемого числа\n      variants: [], //Варианты ответов\n      seconds: 0,\n      currentAnswer: 0, //Текущий сфокусированный инпут ответа\n      result: [],\n      correct_count: 0 //Количество правильных ответов\n    }, ()=>{\n      this.init()\n    })\n  }\n\n  taskStart = (nextPressed = 0) => {\n    if(nextPressed == 1 && time_interval) {\n      clearInterval(time_interval)\n      time_interval = null\n    }\n    this.setState({\n      page: 'task', \n      task: this.state.task + nextPressed\n    })\n    if(this.state.levels < this.state.task || nextPressed == 1 && this.state.task == this.state.levels) {\n      this.check()\n      this.setState({\n        page: 'finish',\n        task: 0,\n        timer: 0\n      })\n      return null;\n    }\n    this.startTimer(this.state.time_1, nextPressed).then(()=>{\n      this.setState({\n        page: 'task_sum',\n        timer: 0,\n        currentAnswer: 0\n      })\n      this.variantCreate()\n      this.startTimer(this.state.time_2).then(()=>{\n        this.setState({\n          task: this.state.task + 1,\n          timer: 0\n        }, ()=>{\n          this.taskStart();\n        })\n      })\n    })\n  }\n\n  numbersLine() {\n    if(this.state.task > this.state.levels) return null;\n    return this.state.numbers[this.state.task][0].map((l, i) => {\n      return (<Text style={styles.number} key={i}>{l}</Text>)\n    })\n  }\n\n  answers = () => {\n    if(this.state.task > this.state.levels) return null;\n    return this.state.answers[this.state.task].map((l, i) => {\n      return (<TouchableHighlight \n                key={i}\n                underlayColor=\"transparent\"\n                onPress={() => this.setState({currentAnswer: i})}>\n                  <Text style={[styles.numberAnswer, {\n                    borderBottomColor: (this.state.currentAnswer === i) ? '#7f8c8d' : ((l == '0') ? '#ecf0f1' : 'black'),\n                    color: (this.state.currentAnswer === i) ? '#7f8c8d' : ((l == '0') ? '#ecf0f1' : 'black')\n                  }]}>{l}</Text>\n              </TouchableHighlight>)\n    })\n  }\n\n  variantCreate = () => {\n    let variants = []\n    if(this.state.task > this.state.levels) return null;\n    this.state.numbers[this.state.task][1].map((l, i) => {\n      let variant_index = this.getRandomIntInclusive(0,(this.state.variants_count-1));\n      if(!variants[variant_index]) {\n        variants[variant_index] = l\n      } else {\n        let found = false;\n        for (let index = 0; index <= this.state.variants_count-1; index++) {\n          if(!variants[index] && !found) {\n            found = true;\n            variants[index] = l\n          }\n        }\n      }\n    })\n    for (let i = 0; i < this.state.variants_count; i++) {\n      if(!variants[i]) {\n        variants[i] = this.getRandomIntInclusive(this.state.min_random*2,this.state.max_random*2)\n      }\n    }\n    this.setState({variants: variants})\n    //console.log(variants)\n  }\n\n  variantRender = () => {\n    return this.state.variants.map((l, i) => {\n      return (<TouchableHighlight\n                key={i}\n                underlayColor=\"#5cd28e\"\n                style={styles.variant}\n                onPress={() => this.variantPress(l, i)}\n              >\n                <Text style={styles.variantText} key={i}>{l}</Text>\n              </TouchableHighlight>);\n    })\n  }\n\n  variantPress = (value, key) => {\n    this.state.answers[this.state.task][this.state.currentAnswer] = value;\n    this.setState({answers: this.state.answers}, ()=>{\n      this.setState({\n        currentAnswer: (this.state.currentAnswer === (this.state.numbers_count - 2)) ? 0 : (this.state.currentAnswer+1)\n      })\n    });\n  }\n\n  pages = () => {\n    switch (this.state.page) {\n      case \"start\":\n        return (<Fragment>\n                  <Text style={styles.title}>Memory training</Text>\n                  <Text style={styles.desc}>You will be given {this.state.numbers_count} numbers(example of the level 'Medium'). Your task is to try to remember them in {this.state.time_1} seconds, then add the first with the second in your mind, and write down the resulting amount; add the second number with the third, write down the amount; etc. Thus, {this.state.numbers_count - 1} amounts should be received and recorded from you. The calculation and execution time is {this.state.time_2} seconds. Then proceed to the next row of numbers</Text>\n                  <TouchableHighlight\n                    underlayColor=\"#5cd28e\"\n                    style={styles.button}\n                    onPress={() => this.levelsChoose()}\n                  >\n                    <Text style={styles.buttonText}>Start</Text>\n                  </TouchableHighlight>\n                </Fragment>)\n\n      case \"levels_choose\":\n        return (<Fragment>\n            <Text style={styles.title}>Select difficulty level</Text>\n            <TouchableHighlight\n              underlayColor=\"#f1c40f\"\n              style={[styles.button,{backgroundColor: '#f1c40f'}]}\n              onPress={() => {\n                this.levelsChooseBtns(0);\n              }}\n            >\n              <View style={styles.iconText}>\n                <Text style={styles.buttonText}>Easy 👶</Text>\n              </View>\n            </TouchableHighlight>\n            <TouchableHighlight\n              underlayColor=\"#f39c12\"\n              style={[styles.button,{backgroundColor: '#f39c12'}]}\n              onPress={() => {\n                this.levelsChooseBtns(1);\n              }}\n            >\n              <View style={styles.iconText}>\n                <Text style={styles.buttonText}>Medium 😀</Text>\n              </View>\n            </TouchableHighlight>\n            <TouchableHighlight\n              underlayColor=\"#e67e22\"\n              style={[styles.button,{backgroundColor: '#e67e22'}]}\n              onPress={() => {\n                this.levelsChooseBtns(2);\n              }}\n            >\n              <View style={styles.iconText}>\n                <Text style={styles.buttonText}>Hard 🔥</Text>\n              </View>\n            </TouchableHighlight>\n            <TouchableHighlight\n              underlayColor=\"#e74c3c\"\n              style={[styles.button,{backgroundColor: '#e74c3c'}]}\n              onPress={() => {\n                this.levelsChooseBtns(3);\n              }}\n            >\n              <View style={styles.iconText}>\n                <Text style={styles.buttonText}>Very hard 🤬🔥</Text>\n              </View>\n            </TouchableHighlight>\n            <TouchableHighlight\n                underlayColor=\"#ecf0f1\"\n                style={styles.buttonShare}\n                onPress={() => {\n                  this.setState({\n                    page: 'start'\n                  })\n                }}\n              >\n                <Text style={styles.buttonTextShare}>Back</Text>\n            </TouchableHighlight>\n          </Fragment>)\n      \n      case \"task\":\n        return (<Fragment>\n                  <Text style={styles.titleLevels}>{this.state.task + 1}/{this.state.levels + 1}</Text>\n                  <Text style={styles.title}>Memorize the numbers</Text>\n                  <View style={styles.numbersBoxTask}>\n                    {this.numbersLine()}\n                  </View>\n                </Fragment>)\n\n      case \"task_sum\":\n        return (<Fragment>\n                  <Text style={styles.titleLevels}>{this.state.task + 1}/{this.state.levels + 1}</Text>\n                  <Text style={styles.title}>Enter answers</Text>\n                  <View style={styles.numbersBox}>\n                    {this.answers()}\n                  </View>\n                  <View style={styles.numbersBoxVariants}>\n                    {this.variantRender()}\n                  </View>\n                  <TouchableHighlight\n                    underlayColor=\"#7f8c8d\"\n                    style={styles.buttonNext}\n                    onPress={() => this.taskStart(1)}\n                  >\n                    <Text style={styles.buttonText}>Next</Text>\n                  </TouchableHighlight>\n                </Fragment>)\n\n      case \"finish\":\n        return (<Fragment>\n                  <Text style={styles.title}>Result</Text>\n                  <Text style={styles.descEnd}>The number of correct answers - {this.state.correct_count}. The norm of an adult is from {((this.state.numbers_count-1)*10)*0.75} and above</Text>\n                  {this.result()}\n                  <TouchableHighlight\n                    underlayColor=\"#5cd28e\"\n                    style={styles.button}\n                    onPress={() => this.repeat()}\n                  >\n                    <Text style={styles.buttonText}>Repeat</Text>\n                  </TouchableHighlight>\n                </Fragment>)\n    \n      default:\n        break;\n    }\n  }\n\n  bannerError = (e) => {\n    alert(e)\n  }\n\n  progressBar = () => {\n    if(Platform.OS == 'android') {\n      return <ProgressBarAndroid style={styles.slider} styleAttr=\"Horizontal\" color=\"#e74c3c\" indeterminate={false} progress={this.state.timer} />\n    } else {\n      return <Slider\n          style={styles.slider}\n          minimumValue={0}\n          maximumValue={1}\n          value={this.state.timer}\n          disabled={false}\n          thumbTintColor=\"transparent\"\n          minimumTrackTintColor=\"#e74c3c\"\n          maximumTrackTintColor=\"transparent\"\n      />\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n      <View style={styles.pagesBox}>\n        {this.progressBar()}\n        {this.pages()}\n        <StatusBar style=\"auto\" />\n      </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  numbersBox: {\n    flexDirection: 'row',\n  },\n  numbersBoxTask: {\n    flexDirection: 'row',\n    paddingTop:10\n  },\n  numbersBoxVariants: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 30\n  },\n  number: {\n    fontSize: normalize(34),\n    color: 'black',\n    padding: 5\n  },\n  numberResult: {\n    fontSize: normalize(24),\n    color: '#7f8c8d',\n    padding: 5\n  },\n  numberAnswer: {\n    fontSize: normalize(34),\n    color: '#7f8c8d',\n    margin: 5,\n    padding: 5,\n    borderBottomColor: '#7f8c8d',\n    borderBottomWidth: 3\n  },\n  pagesBox: {\n    flex: 1,\n    padding: 15,\n    paddingTop: 0,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  slider: {\n    top: 0,\n    position: 'absolute',\n    width: '100%', \n    height: Platform.OS == 'android' ? 4 : 2,\n    zIndex: 1000,\n  },\n  iconText: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: normalize(28),\n    textAlign: 'center',\n    padding: 15,\n  },\n  titleLevels: {\n    fontSize: normalize(28),\n    textAlign: 'center',\n    padding: 15,\n    color: '#7f8c8d',\n  },\n  desc: {\n    fontSize: normalize(14),\n    textAlign: 'center',\n    padding: 15\n  },\n  descEnd: {\n    fontSize: normalize(14),\n    textAlign: 'center',\n    padding: 15,\n    paddingTop: 0\n  },\n  button: {\n    backgroundColor: '#2ecc71',\n    borderRadius: 30,\n    width: '50%',\n    margin: 15\n  },\n  buttonShare: {\n    backgroundColor: '#ecf0f1',\n    borderRadius: 30,\n    width: '50%',\n    margin: 15,\n    marginBottom: 0\n  },\n  buttonTextShare: {\n    fontSize: normalize(16),\n    fontWeight: '500',\n    textAlign: 'center',\n    padding: 15,\n    color: '#34495e'\n  },\n  buttonNext: {\n    backgroundColor: '#bdc3c7',\n    borderRadius: 30,\n    width: '50%',\n    margin: 15,\n    marginTop: 30\n  },\n  variant: {\n    backgroundColor: '#2ecc71',\n    borderRadius: 25,\n    width: 50,\n    height: 50,\n    margin: 10\n  },\n  variantText: {\n    fontSize: 20,\n    fontWeight: '500',\n    textAlign: 'center',\n    padding: 10,\n    color: 'white'\n  },\n  buttonText: {\n    fontSize: normalize(16),\n    fontWeight: '500',\n    textAlign: 'center',\n    padding: 15,\n    color: 'white'\n  }\n});\n"],"sourceRoot":""}